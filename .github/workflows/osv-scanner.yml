# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# A sample workflow which sets up periodic OSV-Scanner scanning for vulnerabilities,
# in addition to a PR check which fails if new vulnerabilities are introduced.
#
# For more examples and options, including how to ignore specific vulnerabilities,
# see https://google.github.io/osv-scanner/github-action/
name: OSV-Scanner

on:
  schedule:
    - cron: '16 5 * * 5'
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      
permissions:
  security-events: write
  contents: read
  
jobs:
  osv-scan:
  
    # uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@75532bf0bf75464b047d80414dbce04449498365" #1.7.3
    # with:
    #   scan-args: |-
    #     --lockfile=pubspec.lock
    #     --format=json
    #     --output=osv-scan-results.json
    #     --skip-git
    #   # upload-sarif: false
    #   fail-on-vuln: true

  
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download OSV-Scanner
        run: |
          curl -L -o osv-scanner https://github.com/google/osv-scanner/releases/download/v1.7.4/osv-scanner_linux_amd64
          chmod +x osv-scanner
          sudo mv osv-scanner /usr/local/bin/osv-scanner  

        continue-on-error: false

      - name: Verify OSV-Scanner 
        run: |
          file /usr/local/bin/osv-scanner
          /usr/local/bin/osv-scanner --version
        continue-on-error: true
          
      - name: Run OSV-Scanner
        id: osv-scan
        run: |
          /usr/local/bin/osv-scanner --lockfile=pubspec.lock --format=json > osv-scan-results.json
        continue-on-error: true

      - name: Get Commit Info
        id: commit-info
        run: |
          echo "Fetching commit info..."
          COMMIT_HASH=$(git log -1 --pretty=format:'%H')
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          COMMIT_AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          COMMIT_AUTHOR_USERNAME=$(git log -1 --pretty=format:'%ae' | cut -d '@' -f 1)
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"

          echo "COMMIT_HASH=${COMMIT_HASH}"
          echo "COMMIT_AUTHOR=${COMMIT_AUTHOR}"
          echo "COMMIT_AUTHOR_EMAIL=${COMMIT_AUTHOR_EMAIL}"
          echo "COMMIT_AUTHOR_USERNAME=${COMMIT_AUTHOR_USERNAME}"
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}"
          echo "REPO_URL=${REPO_URL}"

          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=${COMMIT_AUTHOR}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR_EMAIL=${COMMIT_AUTHOR_EMAIL}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR_USERNAME=${COMMIT_AUTHOR_USERNAME}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        
      - name: Upload OSV-Scanner results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: osv-scan-results
          path: osv-scan-results.json

      - name: Set OSV-Scanner Results as Environment Variable
        run: |
          RESULTS=$(jq -c .results osv-scan-results.json)
          echo "RESULTS=Shikhar:${RESULTS}" >> $GITHUB_ENV
          
  notify-teams:
    needs: osv-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download OSV-Scanner results
        uses: actions/download-artifact@v4
        with:
          name: osv-scan-results
          
      - name: Notify Teams Channel
        # if: failure() || steps.osv-scan.outcome == 'failure'
        if: always()
        run: |
          RESULTS=$(echo "${{ env.RESULTS }}" | jq '.')
          MESSAGE=$(cat <<EOF
          {
          "@type": "MessageCard",
          "@context": "http://schema.org/extensions",
          "themeColor": "0076D7",
          "title": "OSV Scanner : Flutter Country Picker",
          "summary": "Flutter Country Picker",
          "sections": [{
             "activityTitle": "on [${{github.repository}}](${{ github.server_url }}/${{ github.repository }}) by ${{ env.COMMIT_AUTHOR}}",
             "text": "Dependancies Affected",
             "facts": [
             {
             "name": "Dep1",
             "value": "${{ env.RESULTS }}"
             },
             {
                 "name": "Repository",
                 "value": "${{ env.REPO_URL }}"
               },
               {
                 "name": "Commit Author",
                 "value": "${{ env.COMMIT_AUTHOR }}"
               },
               {
                 "name": "Commit Author Email",
                 "value": "${{ env.COMMIT_AUTHOR_EMAIL }}"
               },
               {
                 "name": "Commit Hash",
                 "value": "${{ env.COMMIT_HASH }}"
               }
              ],
          "markdown": true
          }],
          "potentialAction": [{
             "@type": "OpenUri",
             "name": "View Full Results",
             "targets": [{
                "os": "default",
                "uri": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
             }]
           }]
          }
          EOF
          )
          
          echo "Sending message to Teams: ${MESSAGE}"

        
          # RESULT=$(jq -c .results osv-scan-results.json) >>
          # MESSAGE="{\"text\": \"OSV-Scanner results:\n${{ env.RESULTS }}\"}"
          curl -H "Content-Type: application/json" -d "$MESSAGE" ${{ vars.MS_TEAMS_WEBHOOK_URL }}
          echo "${MESSAGE}"
        env:
          TEAMS_WEBHOOK_URL: ${{ vars.MS_TEAMS_WEBHOOK_URL }}
          
        # uses: jdcargile/ms-teams-notification@v1.4
        # with:
        #   github-token: ${{ github.token }} # this will use the runner's token.
        #   ms-teams-webhook-uri: ${{ vars.MS_TEAMS_WEBHOOK_URL }}
        #   notification-summary: Flutter Country Picker ${{ env.RESULTS }}
        #   notification-color: 17a2b8
        #   verbose-logging: true
